Baiklah, saya akan memberikan penjelasan yang lebih detail untuk setiap baris kode yang kamu berikan. Berikut adalah penjelasan kode dengan komentar yang lebih mendalam:

```cpp
#include <iostream> // Mengimpor pustaka untuk input dan output, seperti cin dan cout
#include <string>   // Mengimpor pustaka untuk menggunakan tipe data string
#include <vector>   // Mengimpor pustaka untuk menggunakan tipe data vector (array dinamis)
using namespace std; // Menggunakan namespace std agar tidak perlu menulis std:: setiap kali

// Struct untuk data makanan
struct FoodData { // Membuat struktur bernama FoodData untuk menyimpan informasi tentang makanan
    string food; // Nama makanan (misalnya "Nasi Goreng")
    int price;   // Harga makanan dalam bentuk integer (misalnya 20000)
    string category; // Kategori makanan (misalnya "Makanan Utama")
    bool available; // Status ketersediaan makanan (true jika tersedia, false jika tidak)
    FoodData* next; // Pointer ke makanan berikutnya dalam daftar (linked list)
    FoodData* prev; // Pointer ke makanan sebelumnya dalam daftar (linked list)
};

// Struct untuk data pesanan (queue)
struct Order { // Membuat struktur bernama Order untuk menyimpan informasi tentang pesanan
    string id; // ID unik untuk pesanan (misalnya "01AB")
    string name; // Nama pelanggan yang melakukan pesanan
    string food; // Nama makanan yang dipesan
    int amount; // Jumlah makanan yang dipesan (misalnya 2 porsi)
    int totalPrice; // Total harga dari pesanan (harga per porsi dikali jumlah)
    string note; // Catatan tambahan dari pelanggan (misalnya "Tanpa pedas")
    Order* next; // Pointer ke pesanan berikutnya dalam antrean
};

// Struct untuk data waiter
struct DataWaiter { // Membuat struktur bernama DataWaiter untuk menyimpan informasi tentang waiter
    string robotName; // Nama robot waiter yang mengantarkan pesanan
    string orderId; // ID pesanan yang diantarkan
    string customerName; // Nama pelanggan yang memesan
    string foodOrder; // Nama makanan yang dipesan
    int amountOrder; // Jumlah makanan yang dipesan
    int totalOrder; // Total harga dari pesanan
    string noteOrder; // Catatan tambahan dari pelanggan
    string paymentMethod; // Metode pembayaran yang digunakan (misalnya "Cash" atau "QRIS")
};

// Struct untuk waiter robot
struct WaiterRobot { // Membuat struktur bernama WaiterRobot untuk menyimpan informasi tentang robot waiter
    string name; // Nama robot waiter (misalnya "Robot1")
    string id; // ID unik untuk robot waiter
    bool available; // Status ketersediaan robot (true jika tersedia, false jika tidak)
};

// Variabel global
FoodData* head = nullptr; // Pointer ke makanan pertama dalam daftar (head dari linked list)
FoodData* tail = nullptr; // Pointer ke makanan terakhir dalam daftar (tail dari linked list)
FoodData* current = nullptr; // Pointer ke makanan saat ini yang sedang ditampilkan
Order* front = nullptr; // Pointer ke pesanan pertama dalam antrean (front dari queue)
Order* rear = nullptr; // Pointer ke pesanan terakhir dalam antrean (rear dari queue)
vector<WaiterRobot> robotStack; // Stack untuk menyimpan robot waiter yang tersedia
vector<DataWaiter> transactionHistory; // Vector untuk menyimpan riwayat transaksi

// Fungsi pendukung
void displayFood(FoodData* food) { // Fungsi untuk menampilkan informasi tentang makanan
    if (food) { // Jika pointer food tidak null (ada data makanan)
        cout << "--------------------------------------\n"; // Menampilkan garis pemisah
        cout << "| Food: " << food->food << "\n"; // Menampilkan nama makanan
        cout << "| Price: Rp " << food->price << "\n"; // Menampilkan harga makanan
        cout << "| Category: " << food->category << "\n"; // Menampilkan kategori makanan
        cout << "| Available: " << (food->available ? "Yes" : "No") << "\n"; // Menampilkan ketersediaan makanan
        cout << "--------------------------------------\n"; // Menampilkan garis pemisah
    }
}

void displayOrder(Order* order) { // Fungsi untuk menampilkan informasi tentang pesanan
    if (order) { // Jika pointer order tidak null (ada data pesanan)
        cout << "--------------------------------------\n"; // Menampilkan garis pemisah
        cout << "| ID: " << order->id << "\n"; // Menampilkan ID pesanan
        cout << "| Name: " << order->name << "\n"; // Menampilkan nama pelanggan
        cout << "| Food: " << order->food << "\n"; // Menampilkan nama makanan yang dipesan
        cout << "| Amount: " << order->amount << "\n"; // Menampilkan jumlah makanan yang dipesan
        cout << "| Total: Rp " << order->totalPrice << "\n"; // Menampilkan total harga pesanan
        cout << "| Note: " << (order->note.empty() ? "No note" : order->note) << "\n"; // Menampilkan catatan tambahan jika ada
        cout << "--------------------------------------\n"; // Menampilkan garis pemisah
    }
}

// Fungsi untuk generate ID pesanan sesuai format string
string generateOrderId(const string& customerName, const string& foodName, int amount, const string& note) { // Fungsi untuk membuat ID pesanan
    string id = ""; // Inisialisasi ID sebagai string kosong

    // Mengambil urutan alfabet huruf pertama customerName
    int customerInitialOrder = toupper(customerName[0]) - 'A' + 1; // Menghitung urutan huruf pertama nama pelanggan
    id += (customerInitialOrder < 10 ? "0" : "") + to_string(customerInitialOrder); // Menambahkan angka ke ID

    // Mengambil urutan alfabet dua huruf pertama foodName
    if (foodName.length() >= 2) { // Jika nama makanan memiliki dua huruf atau lebih
        int foodInitialOrder1 = toupper(foodName[0]) - 'A' + 1; // Menghitung urutan huruf pertama nama makanan
        int foodInitialOrder2 = toupper(foodName[1]) - 'A' + 1; // Menghitung urutan huruf kedua nama makanan
        id += (foodInitialOrder1 < 10 ? "0" : "") + to_string(foodInitialOrder1); // Menambahkan huruf pertama ke ID
        id += (foodInitialOrder2 < 10 ? "0" : "") + to_string(foodInitialOrder2); // Menambahkan huruf kedua ke ID
    } else {
        id += "0000"; // Jika nama makanan kurang dari dua huruf, tambahkan "0000" ke ID
    }

    // Menambahkan jumlah pesanan
    id += to_string(amount); // Menambahkan jumlah makanan yang dipesan ke ID

    // Menambahkan 1 jika ada note, 0 jika tidak ada note
    id += (note.empty() ? "0" : "1"); // Menambahkan "0" atau "1" berdasarkan ada tidaknya catatan

    return id; // Mengembalikan ID yang telah dibuat
}

// Tambah data makanan
void addFood() { // Fungsi untuk menambahkan data makanan baru
    FoodData* newFood = new FoodData; // Membuat objek FoodData baru
    cout << "Food's name: "; getline(cin, newFood->food); // Meminta nama makanan dari pengguna
    cout << "Price: "; cin >> newFood->price; cin.ignore(); // Meminta harga makanan dari pengguna
    cout << "Category: "; getline(cin, newFood->category); // Meminta kategori makanan dari pengguna
    cout << "Available (1 for Yes, 0 for No): "; cin >> newFood->available; cin.ignore(); // Meminta status ketersediaan

    newFood->next = nullptr; // Mengatur pointer next ke null
    newFood->prev = tail; // Mengatur pointer prev ke tail saat ini
    if (!head) head = newFood; // Jika head kosong, set head ke newFood
    if (tail) tail->next = newFood; // Jika tail tidak kosong, set next tail ke newFood
    tail = newFood; // Set tail ke newFood
}

// Cari data makanan
void findFood() { // Fungsi untuk mencari data makanan berdasarkan nama
    cout << "Insert the food name you want to find\n> "; // Meminta nama makanan dari pengguna
    string name; // Variabel untuk menyimpan nama makanan
    getline(cin, name); // Membaca nama makanan dari input
    FoodData* temp = head; // Mengatur pointer sementara ke head
    while (temp) { // Selama ada data makanan
        if (temp->food == name) { // Jika nama makanan ditemukan
            cout << name << "'s data found\n"; // Menampilkan pesan bahwa data ditemukan
            displayFood(temp); // Menampilkan data makanan
            cout << "Press Enter to Continue!!\n"; // Meminta pengguna untuk melanjutkan
            cin.ignore(); // Mengabaikan input
            return; // Keluar dari fungsi
        }
        temp = temp->next; // Melanjutkan ke makanan berikutnya
    }
    cout << name << "'s data not found\n"; // Menampilkan pesan jika data tidak ditemukan
    cin.ignore(); // Mengabaikan input
}

// Ubah data makanan
void changeFood() { // Fungsi untuk mengubah data makanan yang sudah ada
    cout << "Insert the food name you want to change\n> "; // Meminta nama makanan yang ingin diubah
    string name; // Variabel untuk menyimpan nama makanan
    getline(cin, name); // Membaca nama makanan dari input
    FoodData* temp = head; // Mengatur pointer sementara ke head
    while (temp) { // Selama ada data makanan
        if (temp->food == name) { // Jika nama makanan ditemukan
            cout << "- Changing " << name << "'s data\n"; // Menampilkan pesan bahwa data akan diubah
            cout << "1. Change Price\n2. Change Category\n3. Change Availability\n> "; // Menampilkan pilihan perubahan
            int choice; // Variabel untuk menyimpan pilihan pengguna
            cin >> choice; cin.ignore(); // Membaca pilihan pengguna
            if (choice == 1) { // Jika pilihan adalah mengubah harga
                cout << "Insert the new price\n> "; // Meminta harga baru
                cin >> temp->price; cin.ignore(); // Mengubah harga makanan
            } else if (choice == 2) { // Jika pilihan adalah mengubah kategori
                cout << "Insert the new category\n> "; // Meminta kategori baru
                getline(cin, temp->category); // Mengubah kategori makanan
            } else if (choice == 3) { // Jika pilihan adalah mengubah ketersediaan
                cout << "Is the food available? (1 for Yes, 0 for No)\n> "; // Meminta status ketersediaan baru
                cin >> temp->available; cin.ignore(); // Mengubah status ketersediaan
            }
            cout << name << "'s data has been updated\n"; // Menampilkan pesan bahwa data telah diperbarui
            displayFood(temp); // Menampilkan data makanan yang telah diperbarui
            cout << "Press Enter to Continue!!\n"; // Meminta pengguna untuk melanjutkan
            cin.ignore(); // Mengabaikan input
            return; // Keluar dari fungsi
        }
        temp = temp->next; // Melanjutkan ke makanan berikutnya
    }
    cout << name << "'s data not found\n"; // Menampilkan pesan jika data tidak ditemukan
    cin.ignore(); // Mengabaikan input
}

// Hapus data makanan
void deleteFood() { // Fungsi untuk menghapus data makanan
    cout << "Insert the food name you want to delete\n> "; // Meminta nama makanan yang ingin dihapus
    string name; // Variabel untuk menyimpan nama makanan
    getline(cin, name); // Membaca nama makanan dari input
    FoodData* temp = head; // Mengatur pointer sementara ke head
    while (temp) { // Selama ada data makanan
        if (temp->food == name) { // Jika nama makanan ditemukan
            displayFood(temp); // Menampilkan data makanan yang akan dihapus
            cout << "Are you sure you want to delete? (y/n)\n> "; // Meminta konfirmasi penghapusan
            char confirm; // Variabel untuk menyimpan konfirmasi pengguna
            cin >> confirm; cin.ignore(); // Membaca konfirmasi
            if (confirm == 'y' || confirm == 'Y') { // Jika konfirmasi adalah 'y' atau 'Y'
                if (temp->prev) temp->prev->next = temp->next; // Menghubungkan makanan sebelumnya dengan makanan berikutnya
                if (temp->next) temp->next->prev = temp->prev; // Menghubungkan makanan berikutnya dengan makanan sebelumnya
                if (temp == head) head = temp->next; // Jika yang dihapus adalah head, set head ke makanan berikutnya
                if (temp == tail) tail = temp->prev; // Jika yang dihapus adalah tail, set tail ke makanan sebelumnya
                delete temp; // Menghapus objek makanan
                cout << name << "'s data has been deleted\n"; // Menampilkan pesan bahwa data telah dihapus
            }
            cout << "Press Enter to Continue!!\n"; // Meminta pengguna untuk melanjutkan
            cin.ignore(); // Mengabaikan input
            return; // Keluar dari fungsi
        }
        temp = temp->next; // Melanjutkan ke makanan berikutnya
    }
    cout << name << "'s data not found\n"; // Menampilkan pesan jika data tidak ditemukan
    cin.ignore(); // Mengabaikan input
}

// Lihat semua data makanan
void seeAllFoods(bool isAdmin) { // Fungsi untuk melihat semua data makanan
    current = head; // Mengatur pointer current ke head
    while (current) { // Selama ada data makanan
        displayFood (current); // Menampilkan data makanan saat ini
        if (isAdmin) { // Jika pengguna adalah admin
            cout << "1. Next\n2. Previous\n3. Exit\n> "; // Menampilkan pilihan navigasi
        } else { // Jika pengguna bukan admin
            cout << "1. Next\n2. Previous\n3. Order\n4. Exit\n> "; // Menampilkan pilihan navigasi dan opsi pemesanan
        }
        int choice; // Variabel untuk menyimpan pilihan pengguna
        cin >> choice; cin.ignore(); // Membaca pilihan pengguna
        if (choice == 1) current = current->next ? current->next : head; // Jika pilihan adalah 'Next', pindah ke makanan berikutnya atau kembali ke head
        else if (choice == 2) current = current->prev ? current->prev : tail; // Jika pilihan adalah 'Previous', pindah ke makanan sebelumnya atau kembali ke tail
        else if (!isAdmin && choice == 3) { // Jika pengguna bukan admin dan memilih 'Order'
            if (!current->available) { // Jika makanan tidak tersedia
                cout << "Sorry, this menu is out of stock. Please choose a different one.\n"; // Menampilkan pesan bahwa makanan habis
            } else { // Jika makanan tersedia
                cout << "Ordering " << current->food << "...\n"; // Menampilkan pesan pemesanan
                cout << "Order placed successfully!\n"; // Menampilkan pesan bahwa pemesanan berhasil
            }
        } else break; // Keluar dari loop jika pilihan tidak valid
    }
}

// Fungsi untuk menambah robot
void addRobot() { // Fungsi untuk menambahkan robot waiter baru
    WaiterRobot newRobot; // Membuat objek WaiterRobot baru
    cout << "Robot's Name\n> "; // Meminta nama robot dari pengguna
    getline(cin, newRobot.name); // Membaca nama robot dari input
    newRobot.id = to_string(robotStack.size() + 1); // Mengatur ID robot berdasarkan ukuran stack saat ini
    newRobot.available = true; // Mengatur status ketersediaan robot menjadi true
    robotStack.push_back(newRobot); // Menambahkan robot ke stack
    cout << "Robot is ready to use\n"; // Menampilkan pesan bahwa robot siap digunakan
}

// Fungsi untuk melihat semua robot yang tersedia
void seeAllAvailableRobots() { // Fungsi untuk menampilkan semua robot yang tersedia
    cout << "List of Available Robots:\n"; // Menampilkan judul daftar robot
    for (int i = robotStack.size() - 1; i >= 0; --i) { // Menampilkan robot dalam urutan LIFO
        cout << "- " << robotStack[i].name << "\n"; // Menampilkan nama robot
    }
    cout << "Press Enter to continue!!\n"; // Meminta pengguna untuk melanjutkan
    cin.ignore(); // Mengabaikan input
}

// Fungsi untuk melihat history pemesanan
void seeTransactionHistory() { // Fungsi untuk menampilkan riwayat transaksi
    cout << "All Transaction History\n"; // Menampilkan judul riwayat transaksi
    for (const auto& transaction : transactionHistory) { // Mengiterasi setiap transaksi dalam riwayat
        cout << "--------------------------------------\n"; // Menampilkan garis pemisah
        cout << "| Robot : " << transaction.robotName << "\n"; // Menampilkan nama robot
        cout << "| ID : " << transaction.orderId << "\n"; // Menampilkan ID pesanan
        cout << "| Name : " << transaction.customerName << "\n"; // Menampilkan nama pelanggan
        cout << "| Food : " << transaction.foodOrder << "\n"; // Menampilkan makanan yang dipesan
        cout << "| Amount : " << transaction.amountOrder << "\n"; // Menampilkan jumlah makanan yang dipesan
        cout << "| Total : Rp " << transaction.totalOrder << "\n"; // Menampilkan total harga
        cout << "| Note : " << (transaction.noteOrder.empty() ? "No note" : transaction.noteOrder) << "\n"; // Menampilkan catatan tambahan
        cout << "| Payment : " << transaction.paymentMethod << "\n"; // Menampilkan metode pembayaran
        cout << "--------------------------------------\n"; // Menampilkan garis pemisah
    }
    cout << "Press Enter to continue!!\n"; // Meminta pengguna untuk melanjutkan
    cin.ignore(); // Mengabaikan input
}

// Dashboard admin
void adminDashboard() { // Fungsi untuk menampilkan dashboard admin
    while (true) { // Loop untuk terus menampilkan dashboard
        cout << "======================================\n"; // Menampilkan garis pemisah
        cout << "ADMIN'S DASHBOARD\n"; // Menampilkan judul dashboard
        cout << "======================================\n cout << "|1. Add Food's Data\n"; // Opsi untuk menambahkan data makanan
        cout << "|2. Find Food's Data\n"; // Opsi untuk mencari data makanan
        cout << "|3. Delete Food's Data\n"; // Opsi untuk menghapus data makanan
        cout << "|4. Change Food's Data\n"; // Opsi untuk mengubah data makanan
        cout << "|5. See All Food's Data\n"; // Opsi untuk melihat semua data makanan
        cout << "|6. Add Robot\n"; // Opsi untuk menambahkan robot
        cout << "|7. See All Available Robots\n"; // Opsi untuk melihat semua robot yang tersedia
        cout << "|8. See All Transaction History\n"; // Opsi untuk melihat riwayat transaksi
        cout << "|9. Exit\n> "; // Opsi untuk keluar dari dashboard
        int choice; // Variabel untuk menyimpan pilihan pengguna
        cin >> choice; cin.ignore(); // Membaca pilihan pengguna
        if (choice == 1) addFood(); // Jika pilihan 1, panggil fungsi addFood
        else if (choice == 2) findFood(); // Jika pilihan 2, panggil fungsi findFood
        else if (choice == 3) deleteFood(); // Jika pilihan 3, panggil fungsi deleteFood
        else if (choice == 4) changeFood(); // Jika pilihan 4, panggil fungsi changeFood
        else if (choice == 5) seeAllFoods(true); // Jika pilihan 5, panggil fungsi seeAllFoods dengan isAdmin true
        else if (choice == 6) addRobot(); // Jika pilihan 6, panggil fungsi addRobot
        else if (choice == 7) seeAllAvailableRobots(); // Jika pilihan 7, panggil fungsi seeAllAvailableRobots
        else if (choice == 8) seeTransactionHistory(); // Jika pilihan 8, panggil fungsi seeTransactionHistory
        else break; // Jika pilihan tidak valid, keluar dari loop
    }
}

// Fungsi untuk melakukan pemesanan makanan (User )
void orderFood() { // Fungsi untuk memproses pemesanan makanan oleh pengguna
    if (!head) { // Jika tidak ada makanan yang tersedia
        cout << "No food available.\n"; // Menampilkan pesan bahwa tidak ada makanan
        return; // Keluar dari fungsi
    }

    string customerName, note; // Variabel untuk menyimpan nama pelanggan dan catatan
    int amount; // Variabel untuk menyimpan jumlah makanan yang dipesan

    cout << "Enter your name: "; getline(cin, customerName); // Meminta nama pelanggan
    displayFood(current); // Menampilkan makanan saat ini

    cout << "Amount to order: "; cin >> amount; cin.ignore(); // Meminta jumlah makanan yang dipesan

    cout << "Add a note (optional): "; getline(cin, note); // Meminta catatan tambahan dari pengguna

    int totalPrice = current->price * amount; // Menghitung total harga
    string orderId = generateOrderId(customerName, current->food, amount, note); // Menghasilkan ID pesanan

    Order* newOrder = new Order{orderId, customerName, current->food, amount, totalPrice, note, nullptr}; // Membuat objek Order baru

    if (!front) front = rear = newOrder; // Jika antrean kosong, set front dan rear ke newOrder
    else {
        rear->next = newOrder; // Menghubungkan pesanan terakhir dengan pesanan baru
        rear = newOrder; // Mengatur rear ke pesanan baru
    }

    // Menambahkan ke riwayat transaksi
    DataWaiter waiterData; // Membuat objek DataWaiter untuk menyimpan data transaksi
    waiterData.robotName = "Robot1"; // Nama robot yang mengantarkan pesanan
    waiterData.orderId = orderId; // ID pesanan
    waiterData.customerName = customerName; // Nama pelanggan
    waiterData.foodOrder = current->food; // Makanan yang dipesan
    waiterData.amountOrder = amount; // Jumlah makanan yang dipesan
    waiterData.totalOrder = totalPrice; // Total harga
    waiterData.noteOrder = note; // Catatan tambahan
    waiterData.paymentMethod = "Pending"; // Metode pembayaran awalnya diatur ke pending

    transactionHistory.push_back(waiterData); // Menyimpan data transaksi ke riwayat

    cout << "Order placed successfully with ID: " << orderId << "\n"; // Menampilkan pesan bahwa pemesanan berhasil
    cout << "Press Enter to continue!!\n"; // Meminta pengguna untuk melanjutkan
    cin.ignore(); // Mengabaikan input
}

// Fungsi untuk melihat semua makanan bagi user
void userMenu () { // Fungsi untuk menampilkan menu makanan bagi pengguna
    current = head; // Mengatur pointer current ke head
    while (current) { // Selama ada data makanan
        if (current->available) displayFood(current); // Menampilkan makanan jika tersedia
        cout << "1. Next\n2. Previous\n3. Order\n4. Exit\n> "; // Menampilkan pilihan navigasi
        int choice; // Variabel untuk menyimpan pilihan pengguna
        cin >> choice; cin.ignore(); // Membaca pilihan pengguna
        if (choice == 1) current = current->next ? current->next : head; // Jika pilihan 'Next', pindah ke makanan berikutnya atau kembali ke head
        else if (choice == 2) current = current->prev ? current->prev : tail; // Jika pilihan 'Previous', pindah ke makanan sebelumnya atau kembali ke tail
        else if (choice == 3) orderFood(); // Jika pilihan 'Order', panggil fungsi orderFood
        else break; // Keluar dari loop jika pilihan tidak valid
    }
}

// Fungsi cashier untuk memproses pesanan
void processOrder() { // Fungsi untuk memproses pesanan oleh kasir
    if (!front) { // Jika tidak ada pesanan dalam antrean
        cout << "For now, no orders have come in yet.\n"; // Menampilkan pesan bahwa tidak ada pesanan
        return; // Keluar dari fungsi
    }

    cout << "Order No. " << front->id << "\n"; // Menampilkan nomor pesanan
    displayOrder(front); // Menampilkan detail pesanan
    cout << "1. Accept\n2. Reject\n3. Exit\n> "; // Menampilkan pilihan untuk menerima atau menolak pesanan
    int choice; // Variabel untuk menyimpan pilihan pengguna
    cin >> choice; cin.ignore(); // Membaca pilihan pengguna

    if (choice == 1) { // Jika memilih untuk menerima pesanan
        cout << "What payment method does the customer refer to?\n"; // Meminta metode pembayaran
        cout << "1. QRIS\n2. Debit Card\n3. Cash\n> "; // Menampilkan pilihan metode pembayaran
        int paymentChoice; // Variabel untuk menyimpan pilihan metode pembayaran
        cin >> paymentChoice; cin.ignore(); // Membaca pilihan pengguna
        
        string paymentMethod; // Variabel untuk menyimpan metode pembayaran
        if (paymentChoice == 1) paymentMethod = "QRIS"; // Jika memilih QRIS
        else if (paymentChoice == 2) paymentMethod = "Debit Card"; // Jika memilih Debit Card
        else if (paymentChoice == 3) paymentMethod = "Cash"; // Jika memilih Cash

        // Update the last transaction with payment method
        if (!transactionHistory.empty()) { // Jika riwayat transaksi tidak kosong
            transactionHistory.back().paymentMethod = paymentMethod; // Mengupdate metode pembayaran pada transaksi terakhir
        }

        // Display which robot will deliver the food
        if (!robotStack.empty()) { // Jika ada robot yang tersedia
            string robotName = robotStack.back().name; // Mengambil nama robot terakhir
            robotStack.pop_back(); // Menghapus robot dari stack
            cout << robotName << " will deliver food for " << front->name << "\n"; // Menampilkan pesan bahwa robot akan mengantarkan makanan
            cout << "Order " << front->id << " has been processed!\n"; // Menampilkan pesan bahwa pesanan telah diproses
        } else {
            cout << "No robots available for delivery!\n"; // Menampilkan pesan jika tidak ada robot yang tersedia
        }

        // Remove the order from the queue
        Order* temp = front; // Menyimpan pointer ke pesanan yang sedang diproses
        front = front->next; // Memindahkan front ke pesanan berikutnya
        if (!front) rear = nullptr; // Jika tidak ada pesanan lagi, set rear ke null
        delete temp; // Menghapus objek pesanan yang telah diproses

    } else if (choice == 2) { // Jika memilih untuk menolak pesanan
        cout << "Order rejected.\n"; // Menampilkan pesan bahwa pesanan ditolak
    }

    cout << "Press Enter to continue!!\n"; // Meminta pengguna untuk melanjutkan
    cin.ignore(); // Mengabaikan input
}

// Dashboard cashier
void cashierDashboard() { // Fungsi untuk menampilkan dashboard kasir
    while (true) { // Loop untuk terus menampilkan dashboard
        cout << "======================================\n"; // Menampilkan garis pemisah
        cout << "CASHIER'S DASHBOARD\n"; // Menampilkan judul dashboard
        cout << "======================================\n"; // Menampilkan garis pemisah
        cout << "| 1. Process Order\n"; // Opsi untuk memproses pesanan
        cout << "| 2. Exit\n> "; // Opsi untuk keluar dari dashboard
        int choice; // Variabel untuk menyimpan pilihan pengguna
        cin >> choice; cin.ignore(); // Membaca pilihan pengguna
        if (choice == 1) processOrder(); // Jika pilihan 1, panggil fungsi processOrder
        else break; // Jika pilihan tidak valid, keluar dari loop
    }
}

int main() { // Fungsi utama program
    while (true) { // Loop untuk terus menampilkan menu utama
        cout << "======================================\n"; // Menampilkan garis pemisah
        cout << "WELCOME TO YU EN I ES EI\n"; // Menampilkan judul program
        cout << "======================================\n"; // Menampilkan garis pemisah
        cout << "1. Login as Admin\n2. Login as Cashier\n3. Login as User\n> "; // Menampilkan pilihan login
        int choice; // Variabel untuk menyimpan pilihan pengguna
        cin >> choice; cin.ignore(); // Membaca pilihan pengguna

        if (choice == 1) adminDashboard(); // Jika pilihan 1, panggil fungsi adminDashboard
        else if (choice == 2) cashierDashboard(); // Jika pilihan 2, panggil fungsi cashierDashboard
        else if (choice == 3) userMenu(); // Jika pilihan 3, panggil fungsi userMenu
        else break; // Jika pilihan tidak valid, keluar dari loop
    }

    return 0; // Mengembalikan 0 menandakan program selesai
} 
